<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>options[0] = "Full Screen";
options[1] = "Music Volume";
options[2] = "SFX Volume";
options[3] = "Done";

space = 64; //Space between options on screen
mpos = 0; //position the menu curosr is on at start

OptionsHitBox  = false;
OptionsHitBox2 = false;
OptionsHitBox3 = false;
OptionsHitBox4 = false;

OptionsHoverBox = false;
OptionsHoverBox2 = false;
OptionsHoverBox3 = false;
OptionsHoverBox4 = false;

globalvar MusicVolumeBox;
MusicVolumeBox = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((!instance_exists(obj_options_musicPC))
&amp;&amp; (!instance_exists(obj_options_sfxPC)))
{
    var move = 0; //temp var for changing cursor position
    move -= max(keyboard_check_pressed(vk_up),0); 
    move += max(keyboard_check_pressed(vk_down),0);

    if (move != 0)
    {
        mpos += move;
        if (mpos &lt; 0)
        {
            mpos = array_length_1d(options) - 1;
        }
        if (mpos &gt; array_length_1d(options) - 1)
        {
            mpos = 0;
        }
    }

    var push;
    push = max(keyboard_check_pressed(vk_enter),0);

    if (push == 1)
    {
        Script_Options_PC();
    }
}

//Stay lined up with the menu object
y = obj_menuPC.y;

/************** Collision Boxes ****************/
       
        //Full screen
        var MouseX = mouse_x - view_xview;
        var MouseY = mouse_y - view_yview;
    
        if(MouseX &gt;= 290
        &amp;&amp; MouseY &lt;= 507
        &amp;&amp; MouseX &lt;= 430
        &amp;&amp; MouseY &gt;= 488)
        {
            if(mouse_check_button_pressed(mb_left))
                {
                    OptionsHitBox = true;
                }
            OptionsHoverBox = true;
        }
        else
        {
            OptionsHoverBox = false;
        }
        
        //Music Volume
    
    if(MusicVolumeBox != true)
        {
        if(MouseX &gt;= 291
        &amp;&amp; MouseY &lt;= 572
        &amp;&amp; MouseX &lt;= 471
        &amp;&amp; MouseY &gt;= 550)
        {
            if(mouse_check_button_pressed(mb_left))
                {
                    OptionsHitBox2 = true;
                    MusicVolumeBox = true;
                }
            OptionsHoverBox2 = true;
        }
        else
        {
            OptionsHoverBox2 = false;
        }
    }
    
        
if(OptionsHitBox == true)
{
    Script_Options_PC();
    OptionsHitBox = false;
}

if(OptionsHitBox2 == true)
{
    mpos = 1;
    Script_Options_PC();
    OptionsHitBox2 = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_set_font(fnt_HUD_Small);
draw_set_color(c_white);

var m;
for (m = 0; m &lt; array_length_1d(options); m += 1;)
{
    draw_text(x + space - 250, y + (m * space) - 140, string(options[m]))
}

draw_sprite(spr_MenuCursor, 0, x + 16 - 250, y + mpos * space - 135);

//Draw Bars

/************** Draw Glow *********/

if(OptionsHoverBox == true)
{
    draw_sprite(spr_MenuText,4,382, 505);
}

if(OptionsHoverBox2 == true)
{
    draw_sprite(spr_MenuText,5,382, 570);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
